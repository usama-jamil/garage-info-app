{"version":3,"sources":["serviceWorker.js","components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","index.js"],"names":["Boolean","window","location","hostname","match","Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","Link","to","pathname","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","console","log","_this","setState","stop","this","components_Form","components_Recipes","Component","Recipe","activeRecipe","componentDidMount","searchRequest","res","href","publisher_url","Router","BrowserRouter","Switch","Route","path","component","exact","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97308b11.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\"}}>\r\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\r\n    <button className=\"form__button\">Search</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Recipes = props => (\r\n\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            {props.recipes.map(recipe =>\r\n                (\r\n\r\n                    <div className=\"col-md-4\" key={recipe.recipe_id} style={{ marginBottom: \"2rem\" }}>\r\n                        <div className=\"recipes__box\">\r\n                            <img className=\"recipe__box-img\" src={recipe.image_url} alt={recipe.title} />\r\n                            <div className=\"recipe__text\">\r\n                                <h5 className=\"recipe__title\">{recipe.title.length < 20 ? recipe.title : `${recipe.title.substring(0, 25)}...`}</h5>\r\n                                <p className=\"recipes__subtile\">\r\n                                    Publisher:<span>\r\n                                        {recipe.publisher}\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                            <button className=\"recipe_buttons\">\r\n                                <Link to={{\r\n                                    pathname: `/recipe/${recipe.recipe_id}`,\r\n                                    state: { recipe: recipe.title }\r\n                                }}> View Recipe\r\n                            </Link>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Recipes","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./components/Form\";\nimport Recipes from './components/Recipes';\n\n\nconst API_KEY = \"a05665efd3aff1fb699c986be7b0cc12\";\nclass App extends Component {\n\n  state = {\n    recipes: []\n  }\n\n  getRecipe = async e => {\n\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10`);\n    const data = await api_call.json();\n    console.log(data)\n    this.setState({ recipes: data.recipes })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\"> Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n\n        <Recipes recipes={this.state.recipes}/>\n\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst API_KEY = \"a05665efd3aff1fb699c986be7b0cc12\";\r\n\r\n\r\n\r\nclass Recipe extends Component {\r\n\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const title = this.props.location.state.recipe\r\n        console.log(title)\r\n        const searchRequest = await fetch(`https://cors-anywhere.herokuapp.com/https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`);\r\n\r\n        const res = await searchRequest.json();\r\n        console.log(res)\r\n        this.setState({ activeRecipe: res.recipes[0] })\r\n    }\r\n    render() {\r\n\r\n        const recipe = this.state.activeRecipe\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"active-recipe\">\r\n                    <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title} />\r\n                    <h3 className=\"active--recipe__title\">{recipe.title}</h3>\r\n                    <h4 className=\"active--recipe__publisher\">Publisher:\r\n                <span>{recipe.publisher}</span>\r\n                    </h4>\r\n                    <p className=\"active-recipe__website\">Website:\r\n                <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\r\n                    </p>\r\n                    <button className=\"active-recipe__button\">\r\n                        <Link to=\"/\">Go Home</Link>\r\n                    </button>\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\nexport default Recipe","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport App from '../App'\r\nimport Recipe from './Recipe'\r\n\r\n\r\nconst  Router = ()=>(\r\n<BrowserRouter>\r\n    <Switch>\r\n        <Route path=\"/\" component={App} exact/>\r\n        <Route path=\"/recipe/:id\" component={Recipe}/>\r\n    </Switch>\r\n</BrowserRouter>\r\n);\r\n\r\nexport default Router\r\n    \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Router from './components/Router'\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}